
1. 회원관리 테이블
CREATE TABLE users (
    idx NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    id VARCHAR2(50) NOT NULL,                            
    pwd VARCHAR2(255) NOT NULL,                       
    name VARCHAR2(100) NOT NULL,                    
    age NUMBER,
    birthday DATE,   
    nickname VARCHAR2(100),     
    email VARCHAR2(100) not null,
    address VARCHAR2(255),
    today DATE DEFAULT SYSDATE
);

2. 블로그 설정 테이블 (blog_settings)
CREATE TABLE blog_settings (
    user_idx NUMBER PRIMARY KEY,  -- 사용자 정보 (users 테이블과 연결)
    profile_image VARCHAR2(255),  -- 프로필 이미지 경로
    status_message VARCHAR2(255), -- 상태 메시지
    blog_title VARCHAR2(255),  -- 블로그 이름
    CONSTRAINT fk_user_blog_settings FOREIGN KEY (user_idx) REFERENCES users(idx) ON DELETE CASCADE
);
설명: 각 사용자별로 블로그 설정(프로필 이미지, 상태 메시지, 블로그 이름)을 관리하는 테이블입니다.
게시물은 posts에서 

3. 게시글 테이블 (posts)
CREATE TABLE posts (
    idx NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    title VARCHAR2(255) NOT NULL, 
    content CLOB NOT NULL, 
    created_date DATE DEFAULT SYSDATE, 
    users_idx NUMBER, 
    visibility VARCHAR2(20) DEFAULT 'public',  -- 공개 범위 (public: 전체공개, private: 내 블로그, secret: 비밀글)
    CONSTRAINT fk_user FOREIGN KEY (users_idx) REFERENCES users(idx) ON DELETE CASCADE,
    CONSTRAINT chk_visibility CHECK (visibility IN ('public', 'secret'))  -- 공개 범위 제약 조건
);

// 게시글 파일 관리 테이블 
CREATE TABLE attachments (
    attachment_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  -- 고유 첨부 파일 ID 자동증가 기본키 
    post_idx NUMBER NOT NULL,  -- posts 테이블과 연결되는 게시글 ID
    attachment_url VARCHAR2(1000) NOT NULL,  -- 첨부 파일이나 이미지 URL 또는 경로
    attachment_type VARCHAR2(20) NOT NULL,  -- 첨부 유형 ('file' 또는 'image')
    uploaded_date DATE DEFAULT SYSDATE,  -- 파일 업로드 날짜
    CONSTRAINT fk_post FOREIGN KEY (post_idx) REFERENCES posts(idx) ON DELETE CASCADE  -- posts와의 외래키 연결
);
설명: 각 사용자가 작성한 블로그 게시글을 저장하는 테이블로, 게시글의 제목, 내용, 파일 및 이미지 첨부, 작성자 정보, 공개 범위를 포함하고 있습니다.

4. 태그 테이블 (tags)
CREATE TABLE tags (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    name VARCHAR2(100) NOT NULL
);
설명: 블로그 게시글에 사용될 태그 이름을 저장하는 테이블입니다.


5. 게시글-태그 연관 테이블 (post_tags)
CREATE TABLE post_tags (
    post_idx NUMBER,  -- 게시글 ID
    tags_idx NUMBER,   -- 태그 ID
    CONSTRAINT fk_post FOREIGN KEY (post_idx) REFERENCES posts(idx) ON DELETE CASCADE,
    CONSTRAINT fk_tag FOREIGN KEY (tag_idx) REFERENCES tags(idx) ON DELETE CASCADE
);
설명: 게시글과 태그 간의 다대다 관계를 관리하는 중간 테이블로, 하나의 게시글이 여러 태그를 가질 수 있으며, 하나의 태그가 여러 게시글에 사용될 수 있습니다.


6. 댓글 테이블 (comments)
CREATE TABLE comments (
    idx NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    content VARCHAR2(255) NOT NULL,  -- 댓글 내용
    created_date DATE DEFAULT SYSDATE,  -- 댓글 작성 날짜
    user_idx NUMBER,   -- 댓글 작성자 (users 테이블 연결)
    post_idx NUMBER,   -- 해당 게시글 (posts 테이블 연결)
    CONSTRAINT fk_user_comments FOREIGN KEY (user_idx) REFERENCES users(idx) ON DELETE CASCADE,
    CONSTRAINT fk_post_comments FOREIGN KEY (post_idx) REFERENCES posts(idx) ON DELETE CASCADE
);
설명: 각 게시글에 작성된 댓글을 저장하는 테이블로, 댓글 내용, 작성자, 작성일자를 포함하고 있습니다.


7. 좋아요 테이블 (likes)
CREATE TABLE likes (
    user_idx NUMBER,   -- 좋아요 누른 사용자 (users 테이블 연결)
    post_idx NUMBER,   -- 해당 게시글 (posts 테이블 연결)
    CONSTRAINT fk_user_likes FOREIGN KEY (user_idx) REFERENCES users(idx) ON DELETE CASCADE,
    CONSTRAINT fk_post_likes FOREIGN KEY (post_idx) REFERENCES posts(idx) ON DELETE CASCADE,
    PRIMARY KEY (user_idx, post_idx)  -- 각 사용자는 각 게시글에 대해 한 번만 좋아요를 누를 수 있음
);
설명: 게시글에 대한 좋아요 정보를 저장하는 테이블입니다. 한 사용자가 한 게시글에 대해 한 번만 좋아요를 누를 수 있도록 기본키를 설정합니다.




MyBlog.html
- 로그인 시 개인 블로그 진입 가능 (로그인 안했을 때는 진입 不) 
- 개인 프로필(프로필사진, 닉네임, 상태메세지)
- 글 작성(버튼으로 구현하여 html로 작성 폼 만들 것), 본인이 작성한 전체보기 (버튼으로 구현, html로 리스트 만들 것 )
- 최신게시물 리스트(3개 보여줄거임, 해당 게시글 누르면 게시글 볼 수 있게 해주기)
- 인기 게시물(최신 게시물과 동일하게 구현, 좋아요 순으로 top3 보여주기)
- 게시글 삭제는 myblog - 전체 게시물 리스트에서만 삭제 가능 
- 환경설정 테이블이 있어야할 것으로 보임(로그인 시 해당 계정에 )

게시글 작성 
- 제목, 내용 작성(네이버 스마트 에디터 이용 예정), 사진첨부, 파일첨부, (등록날짜 컬럼 必), 로그인한 사람 닉네임
- 분류 (전체공개, 내 블로그, 비밀글) 만들기 -> 전체 보기 시 trend.html에 보여질 예정 , 내 블로그 선택 시엔 내 블로그에서만 보여질 예정
- 전체보기 선택시 옆에 셀렉트 버튼 하나 생겨서 분류(유머, 지식, 일상) 선택 가능 
- 비밀글 선택 시엔 myblog, mylist(내가 작성한 게시물 리스트 myblog에서 전체보기 선택 시에 보여짐 )에서만 보여질 예정 
- 태그 기능 (해당 태그기능은 검색 혹은 해당 태그 선택 시에 같은 태그를 사용한 게시글이 보여지록 하는 용도로 사용 할 예정)

게시글 보기(mylist or 해당 게시물 내용 보기 시)
- 게시글에 작성된 내용 보여주기  
- 댓글 기능, 좋아요 기능 -> 누적되어야 함 / 좋아요 기능은 좋아요 수에 따라 인기 게시물 처리 할 예정 
- 댓글 등록은 로그인 시에만 가능하며 삭제, 수정 기능 존재 
- 비밀글은 해당 계정주만 볼 수 있으며 전체공개 시엔 trend에 업로드 됨 

Trend.html
- 계정주들이 본인 블로그에서 글 작성 시 분류를 전체공개로 된 게시물만 보여짐 
- nav 만들어서 전체보기, 인기글(좋아요 순으로 보여질 예정)만들고 분류 셀렉트 박스로 (유머, 일상, 지식) 선택하여 게시글 작성 시에 선택했던 분류대로 게시물 보여질 것(유머 선택하면 등록 시 유머로 선택한 게시글만 보여지는 방식)
- 리스트는 네모 박스 안에 게시글 사진, 제목, 간략한 게시글 내용, 등록자 닉네임+이미지, 좋아요+댓글 갯수 보여질 것 
- 해당 게시물 진입하여 좋아요, 댓글작성 이용할 수 있고 여기안에선 해당 게시물 작성자여도 게시물 삭제, 수정 불가 (myblog에 가서 본인 게시물 리스트에 들어가서 가능하도록 구현 할 것 )
- 검색 기능 구현 (분류 : 닉네임, 제목, 태그)로 검색 가능하도록 구현
- 게시글 보기 내에 태그를 선택에도 해당 태그를 사용한 게시글 보이도록 구현 


관리자 계정으로 로그인 시 
- 전체 회원정보 보기 (강제탈퇴 가능)
- Trend.thml에서 게시물 보기 진입 시 게시물 삭제버튼 생성되어 강제 삭제 가능하도록 구현



userEntity

@Entity
@Table(name = "users")
public class UserEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long idx;

    @Column(nullable = false)
    private String id;

    @Column(nullable = false)
    private String pwd;

    @Column(nullable = false)
    private String name;

    private Integer age;
    private Date birthday;
    private String nickname;

    @Column(nullable = false)
    private String email;

    private String address;
    private Date today;

//다대일 하나의 게시글은 하나의 작성자에 의해 작성된다 하지만 한 작성자는 여러개의 게시글을 작성 가능
// 여러개의 게시글이 하나의 작성자와 연결 
    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL) 
    private List<PostEntity> posts = new ArrayList<>();

    @OneToOne(mappedBy = "user", cascade = CascadeType.ALL)
    private BlogSettingsEntity blogSettings;
}


PostEntity 

@Entity
@Table(name = "posts")
public class PostEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long idx;

    @Column(nullable = false)
    private String title;

    @Lob
    private String content;

    private String fileAttachment;
    private String imageAttachment;

    @Column(nullable = false)
    private Date createdDate = new Date();

    @ManyToOne
    @JoinColumn(name = "user_idx")
    private UserEntity user;

    // 다대다 관계 설정
 //다대다관계 post는 여러태그와 연결될 수 있고 하나의 테그는 여러 게시글에 연결될 수 있다. 
//게시글은 여러 태그를 가질 수 있고, 태그는 여러 게시글에 속할 수 있는 관계 
    @ManyToMany
    @JoinTable(
        name = "post_tags", // 중간 테이블 명
        joinColumns = @JoinColumn(name = "post_id"),
        inverseJoinColumns = @JoinColumn(name = "tag_id")
    )
    private List<TagEntity> tags = new ArrayList<>();

    @Column(nullable = false)
    private String visibility = "public";  // '전체공개', '내 블로그', '비밀글'
}




BlogSettingsEntity 

@Entity
@Table(name = "blog_settings")
public class BlogSettingsEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long userIdx;

    private String profileImage;
    private String statusMessage;
    private String blogTitle;

//일대일 관계
// 하나의 사용자가 하나의 프로필을 가질 수 있다 
    @OneToOne
    @JoinColumn(name = "user_idx")
    private UserEntity user;
}


TagEntity 

@Entity
@Table(name = "tags")
public class TagEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, unique = true)
    private String name;

// 다대다 관계 역방향 설정
    @ManyToMany(mappedBy = "tags")
    private List<PostEntity> posts = new ArrayList<>();
}


UserRepository

@Repository
public interface UserRepository extends JpaRepository<UserEntity, Long> {
    // 기본적인 CRUD 메서드들이 제공됨
}


PostRepository
@Repository
public interface PostRepository extends JpaRepository<PostEntity, Long> {
    // 게시물 관련 메서드를 추가할 수 있음
}

BlogSettingsRepository
@Repository
public interface BlogSettingsRepository extends JpaRepository<BlogSettingsEntity, Long> {
    // 블로그 설정 관련 메서드 추가 가능
}


TagRepository
@Repository
public interface TagRepository extends JpaRepository<TagEntity, Long> {
    // 태그 관련 메서드를 추가할 수 있음
}